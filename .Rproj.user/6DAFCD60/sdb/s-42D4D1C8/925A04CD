{
    "contents" : "\n# This is the server part of Braceana.\n# \n# server.R basically works as a backend, but is also used to dynamically generate\n# content. To edit the look and feel of the application, edit the section labeled\n# CONTENT GENERATION below.\n\nlibrary(shiny)\nlibrary(dplyr)\nlibrary(stringr)\n\nshinyServer(function (input, output, session) {\n  \n  ## Internals ----\n  # Function to fetch URL data\n  interpretUrl <- reactive({\n    # For now, simply return the query part of the URL in a parsed state\n    query <- parseQueryString(session$clientData$url_search)\n    \n    query\n  })\n  \n  \n  ## CONTENT GENERATION ----\n  output$navbar <- renderUI({\n    pages_files <- Filter(\n      function (x) str_detect(x, \"[\\\\.]html$\"),\n      list.files(file.path(getwd(), pages_path),\n                 full.names = TRUE)\n    )\n    blog_present <- ( length(list.files(blog_path)) > 0 )\n    \n    ## Basic page metaelements ----\n    barebone_page <- tagList(\n      title = web_title,\n      collapsable = TRUE, responsive = TRUE,\n      footer = tagList(\n        column(8, offset = 2, p(tags$small(HTML(footer_text)), class = \"footertext\"))\n      )\n    )\n    \n    ## Pages ----\n    # Generate a list of tabPanel() each with the contents of one page\n    # (in alphabetical order by filename)\n    pages <- lapply(pages_files, function (name) {\n      \n      # In future, we might want a cleverer strategy for naming\n      # and ordering pages, but for now we'll just assume the name of the\n      # page source file has a camel cased name in it somewhere.\n      nameParts <- str_split(name, \"[\\\\/]\")[[1]]\n      properName <- nameParts[length(nameParts)] %>%\n        str_replace(\"[\\\\.]html$\", \"\") %>%\n        str_replace(\"[[:punct:][:digit:]]*\", \"\") %>%\n        # I'm especially proud of this one: Insert a space before every\n        # upper-case letter that isn't at the beginning of the string.\n        str_replace_all(perl(\"(?<!^)(?=[A-Z0-9])\"), \" \")\n      \n      # Create the tab panel, including the contents of the page and the name\n      tabPanel(\n        properName,\n        column(\n          8, offset = 2,\n          includeHTML(name),\n          br(), br(), hr()\n        )\n      )\n    })\n    \n    ## Blog posts ----\n    \n    if (blog_present) {\n      blog_posts <- list(\n        tabPanel(\n          blog_name,\n          uiOutput('blog')\n        )\n      )\n    } else {\n      blog_posts <- list()\n    }\n    \n    ## <HEAD> ----\n    header <- list(\n      # Yes; this goes AFTER the body definition. This is due to a bug in navbarPage().\n      #       singleton(tags$head(\n      #         tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"http://fonts.googleapis.com/css?family=Open+Sans:300,400|Lato:300,400\")\n      #       )),\n      # singleton(tags$head(\n      #         HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://fonts.googleapis.com/css?family=Open+Sans:300,400|Lato:300,400\">')\n      #       )),\n      ## Other suggestions for style sheets to replace the default bootstrap.css:\n      #singleton(tags$head(\n      #  tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"http://bootswatch.com/2/flatly/bootstrap.css\")\n      #))\n      singleton(tags$head(\n              HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheet.css\">')\n            )),\n      #singleton(includeCSS(\"www/fonts/Lato/stylesheet.css\")),\n      singleton(includeCSS(\"www/lchansson.css\"))\n    )\n    \n    site <- pages %>% append(blog_posts) %>% append(header)\n      \n    # Create a unified list with all tab elements and pass them to navbarPage()\n    tablist <- barebone_page %>% append(site)\n    do.call(navbarPage, tablist)\n  })\n  \n  ## Blog post generation ----\n  output$blog <- renderUI({\n    files <- Filter(function (x) str_detect(x, \"[\\\\.]html$\"), list.files(file.path(getwd(), blog_path), full.names = TRUE))\n    \n    blog <- lapply(files, function (p) {\n      # browser()\n      tagList(column(\n        8, offset = 2,\n        includeHTML(p),\n        br(), br(), hr()\n      ))\n    })\n    \n    blog\n  })\n})\n",
    "created" : 1412776421313.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2921290841",
    "id" : "925A04CD",
    "lastKnownWriteTime" : 1412776595,
    "path" : "~/dev/published_braceana_sites/vpdagarna/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}